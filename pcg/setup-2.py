from distutils.core import setup
from distutils.extension import Extension
from os import getcwd
from os.path import join

from Cython.Build import cythonize

pwd = getcwd()

sources = [join(pwd, 'core_rng.pyx')]

RNG_DUMMY = True
RNG_PCG_32 = False
RNG_PCG_64 = False

def write_config():
    with open('config.pxi', 'w') as config:
        config.write('# Autogenerated\n\n')
        if RNG_PCG_32:
            config.write('DEF RNG_PCG_32=1\n')
            config.write('DEF RNG_PCG_64=0\n')
            config.write('DEF RNG_DUMMY=0\n')
        elif RNG_PCG_64:
            config.write('DEF RNG_PCG_32=0\n')
            config.write('DEF RNG_PCG_64=1\n')
            config.write('DEF RNG_DUMMY=0\n')
        elif RNG_DUMMY:
            config.write('DEF RNG_PCG_32=0\n')
            config.write('DEF RNG_PCG_64=0\n')
            config.write('DEF RNG_DUMMY=1\n')

include_dirs = [pwd]

if RNG_PCG_32:
    sources += [join(pwd, 'src','pcg', p) for p in ('pcg-rngs-64.c','pcg-advance-64.c',
                                              'pcg-output-64.c','pcg-output-32.c')]
    sources += [join(pwd, 'shims/pcg-32','pcg-32-shim.c')]

    defs = [('PCG_32_RNG', '1')]

    include_dirs += [join(pwd,'src','pcg')]

elif RNG_PCG_64:
    sources += [join(pwd, 'src','pcg', p) for p in ('pcg-advance-128.c', 'pcg-rngs-128.c')]
    sources += [join(pwd, 'shims/pcg-64','pcg-64-shim.c')]

    defs = [('PCG_64_RNG', '1'), ('PCG_HAS_128BIT_OPS', '1'), ('__SIZEOF_INT128__', '16')]

    include_dirs += [join(pwd,'src','pcg')]

elif RNG_DUMMY:
    sources += [join(pwd, 'src','dummy', p) for p in ('dummy.c',)]
    sources += [join(pwd, 'shims','dummy','dummy-shim.c')]

    defs = [('DUMMY_RNG', '1')]

    include_dirs += [join(pwd,'src','dummy')]

write_config()

setup(
        ext_modules=cythonize([Extension("core_rng",
                                         sources=sources,
                                         include_dirs=include_dirs,
                                         define_macros=defs,
                                         extra_compile_args=['-std=c99']
                                         )
                               ])
)
